
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsCpp.js
 */

#include <react/renderer/components/RNCNaverMapSpec/Props.h>
#include <react/renderer/core/PropsParserContext.h>
#include <react/renderer/core/propsConversions.h>

namespace facebook::react {

RNCNaverMapCircleProps::RNCNaverMapCircleProps(
    const PropsParserContext &context,
    const RNCNaverMapCircleProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    zIndexValue(convertRawProp(context, rawProps, "zIndexValue", sourceProps.zIndexValue, {0})),
    isHidden(convertRawProp(context, rawProps, "isHidden", sourceProps.isHidden, {false})),
    minZoom(convertRawProp(context, rawProps, "minZoom", sourceProps.minZoom, {0.0})),
    maxZoom(convertRawProp(context, rawProps, "maxZoom", sourceProps.maxZoom, {0.0})),
    isMinZoomInclusive(convertRawProp(context, rawProps, "isMinZoomInclusive", sourceProps.isMinZoomInclusive, {false})),
    isMaxZoomInclusive(convertRawProp(context, rawProps, "isMaxZoomInclusive", sourceProps.isMaxZoomInclusive, {false})),
    coord(convertRawProp(context, rawProps, "coord", sourceProps.coord, {})),
    radius(convertRawProp(context, rawProps, "radius", sourceProps.radius, {0.0})),
    color(convertRawProp(context, rawProps, "color", sourceProps.color, {0})),
    outlineColor(convertRawProp(context, rawProps, "outlineColor", sourceProps.outlineColor, {0})),
    outlineWidth(convertRawProp(context, rawProps, "outlineWidth", sourceProps.outlineWidth, {0.0}))
      {}
RNCNaverMapMarkerProps::RNCNaverMapMarkerProps(
    const PropsParserContext &context,
    const RNCNaverMapMarkerProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    zIndexValue(convertRawProp(context, rawProps, "zIndexValue", sourceProps.zIndexValue, {0})),
    isHidden(convertRawProp(context, rawProps, "isHidden", sourceProps.isHidden, {false})),
    minZoom(convertRawProp(context, rawProps, "minZoom", sourceProps.minZoom, {0.0})),
    maxZoom(convertRawProp(context, rawProps, "maxZoom", sourceProps.maxZoom, {0.0})),
    isMinZoomInclusive(convertRawProp(context, rawProps, "isMinZoomInclusive", sourceProps.isMinZoomInclusive, {false})),
    isMaxZoomInclusive(convertRawProp(context, rawProps, "isMaxZoomInclusive", sourceProps.isMaxZoomInclusive, {false})),
    coord(convertRawProp(context, rawProps, "coord", sourceProps.coord, {})),
    width(convertRawProp(context, rawProps, "width", sourceProps.width, {0.0})),
    height(convertRawProp(context, rawProps, "height", sourceProps.height, {0.0})),
    anchor(convertRawProp(context, rawProps, "anchor", sourceProps.anchor, {})),
    angle(convertRawProp(context, rawProps, "angle", sourceProps.angle, {0.0})),
    isFlatEnabled(convertRawProp(context, rawProps, "isFlatEnabled", sourceProps.isFlatEnabled, {false})),
    isIconPerspectiveEnabled(convertRawProp(context, rawProps, "isIconPerspectiveEnabled", sourceProps.isIconPerspectiveEnabled, {false})),
    alpha(convertRawProp(context, rawProps, "alpha", sourceProps.alpha, {0.0})),
    isHideCollidedSymbols(convertRawProp(context, rawProps, "isHideCollidedSymbols", sourceProps.isHideCollidedSymbols, {false})),
    isHideCollidedMarkers(convertRawProp(context, rawProps, "isHideCollidedMarkers", sourceProps.isHideCollidedMarkers, {false})),
    isHideCollidedCaptions(convertRawProp(context, rawProps, "isHideCollidedCaptions", sourceProps.isHideCollidedCaptions, {false})),
    isForceShowIcon(convertRawProp(context, rawProps, "isForceShowIcon", sourceProps.isForceShowIcon, {false})),
    tintColor(convertRawProp(context, rawProps, "tintColor", sourceProps.tintColor, {0})),
    image(convertRawProp(context, rawProps, "image", sourceProps.image, {})),
    caption(convertRawProp(context, rawProps, "caption", sourceProps.caption, {})),
    subCaption(convertRawProp(context, rawProps, "subCaption", sourceProps.subCaption, {}))
      {}
RNCNaverMapPathProps::RNCNaverMapPathProps(
    const PropsParserContext &context,
    const RNCNaverMapPathProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    zIndexValue(convertRawProp(context, rawProps, "zIndexValue", sourceProps.zIndexValue, {0})),
    isHidden(convertRawProp(context, rawProps, "isHidden", sourceProps.isHidden, {false})),
    minZoom(convertRawProp(context, rawProps, "minZoom", sourceProps.minZoom, {0.0})),
    maxZoom(convertRawProp(context, rawProps, "maxZoom", sourceProps.maxZoom, {0.0})),
    isMinZoomInclusive(convertRawProp(context, rawProps, "isMinZoomInclusive", sourceProps.isMinZoomInclusive, {false})),
    isMaxZoomInclusive(convertRawProp(context, rawProps, "isMaxZoomInclusive", sourceProps.isMaxZoomInclusive, {false})),
    coords(convertRawProp(context, rawProps, "coords", sourceProps.coords, {})),
    width(convertRawProp(context, rawProps, "width", sourceProps.width, {0.0})),
    outlineWidth(convertRawProp(context, rawProps, "outlineWidth", sourceProps.outlineWidth, {0.0})),
    patternInterval(convertRawProp(context, rawProps, "patternInterval", sourceProps.patternInterval, {0})),
    progress(convertRawProp(context, rawProps, "progress", sourceProps.progress, {0.0})),
    color(convertRawProp(context, rawProps, "color", sourceProps.color, {0})),
    passedColor(convertRawProp(context, rawProps, "passedColor", sourceProps.passedColor, {0})),
    outlineColor(convertRawProp(context, rawProps, "outlineColor", sourceProps.outlineColor, {0})),
    passedOutlineColor(convertRawProp(context, rawProps, "passedOutlineColor", sourceProps.passedOutlineColor, {0})),
    isHideCollidedSymbols(convertRawProp(context, rawProps, "isHideCollidedSymbols", sourceProps.isHideCollidedSymbols, {false})),
    isHideCollidedMarkers(convertRawProp(context, rawProps, "isHideCollidedMarkers", sourceProps.isHideCollidedMarkers, {false})),
    isHideCollidedCaptions(convertRawProp(context, rawProps, "isHideCollidedCaptions", sourceProps.isHideCollidedCaptions, {false}))
      {}
RNCNaverMapPolygonProps::RNCNaverMapPolygonProps(
    const PropsParserContext &context,
    const RNCNaverMapPolygonProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    zIndexValue(convertRawProp(context, rawProps, "zIndexValue", sourceProps.zIndexValue, {0})),
    isHidden(convertRawProp(context, rawProps, "isHidden", sourceProps.isHidden, {false})),
    minZoom(convertRawProp(context, rawProps, "minZoom", sourceProps.minZoom, {0.0})),
    maxZoom(convertRawProp(context, rawProps, "maxZoom", sourceProps.maxZoom, {0.0})),
    isMinZoomInclusive(convertRawProp(context, rawProps, "isMinZoomInclusive", sourceProps.isMinZoomInclusive, {false})),
    isMaxZoomInclusive(convertRawProp(context, rawProps, "isMaxZoomInclusive", sourceProps.isMaxZoomInclusive, {false})),
    geometries(convertRawProp(context, rawProps, "geometries", sourceProps.geometries, {})),
    color(convertRawProp(context, rawProps, "color", sourceProps.color, {0})),
    outlineColor(convertRawProp(context, rawProps, "outlineColor", sourceProps.outlineColor, {0})),
    outlineWidth(convertRawProp(context, rawProps, "outlineWidth", sourceProps.outlineWidth, {0.0}))
      {}
RNCNaverMapPolylineProps::RNCNaverMapPolylineProps(
    const PropsParserContext &context,
    const RNCNaverMapPolylineProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    zIndexValue(convertRawProp(context, rawProps, "zIndexValue", sourceProps.zIndexValue, {0})),
    isHidden(convertRawProp(context, rawProps, "isHidden", sourceProps.isHidden, {false})),
    minZoom(convertRawProp(context, rawProps, "minZoom", sourceProps.minZoom, {0.0})),
    maxZoom(convertRawProp(context, rawProps, "maxZoom", sourceProps.maxZoom, {0.0})),
    isMinZoomInclusive(convertRawProp(context, rawProps, "isMinZoomInclusive", sourceProps.isMinZoomInclusive, {false})),
    isMaxZoomInclusive(convertRawProp(context, rawProps, "isMaxZoomInclusive", sourceProps.isMaxZoomInclusive, {false})),
    coords(convertRawProp(context, rawProps, "coords", sourceProps.coords, {})),
    width(convertRawProp(context, rawProps, "width", sourceProps.width, {0.0})),
    color(convertRawProp(context, rawProps, "color", sourceProps.color, {0})),
    pattern(convertRawProp(context, rawProps, "pattern", sourceProps.pattern, {})),
    capType(convertRawProp(context, rawProps, "capType", sourceProps.capType, {RNCNaverMapPolylineCapType::Round})),
    joinType(convertRawProp(context, rawProps, "joinType", sourceProps.joinType, {RNCNaverMapPolylineJoinType::Round}))
      {}
RNCNaverMapViewProps::RNCNaverMapViewProps(
    const PropsParserContext &context,
    const RNCNaverMapViewProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    mapType(convertRawProp(context, rawProps, "mapType", sourceProps.mapType, {RNCNaverMapViewMapType::Basic})),
    layerGroups(convertRawProp(context, rawProps, "layerGroups", sourceProps.layerGroups, {0})),
    initialCamera(convertRawProp(context, rawProps, "initialCamera", sourceProps.initialCamera, {})),
    camera(convertRawProp(context, rawProps, "camera", sourceProps.camera, {})),
    initialRegion(convertRawProp(context, rawProps, "initialRegion", sourceProps.initialRegion, {})),
    region(convertRawProp(context, rawProps, "region", sourceProps.region, {})),
    animationDuration(convertRawProp(context, rawProps, "animationDuration", sourceProps.animationDuration, {0})),
    animationEasing(convertRawProp(context, rawProps, "animationEasing", sourceProps.animationEasing, {0})),
    isIndoorEnabled(convertRawProp(context, rawProps, "isIndoorEnabled", sourceProps.isIndoorEnabled, {false})),
    isNightModeEnabled(convertRawProp(context, rawProps, "isNightModeEnabled", sourceProps.isNightModeEnabled, {false})),
    isLiteModeEnabled(convertRawProp(context, rawProps, "isLiteModeEnabled", sourceProps.isLiteModeEnabled, {false})),
    lightness(convertRawProp(context, rawProps, "lightness", sourceProps.lightness, {0.0})),
    buildingHeight(convertRawProp(context, rawProps, "buildingHeight", sourceProps.buildingHeight, {0.0})),
    symbolScale(convertRawProp(context, rawProps, "symbolScale", sourceProps.symbolScale, {0.0})),
    symbolPerspectiveRatio(convertRawProp(context, rawProps, "symbolPerspectiveRatio", sourceProps.symbolPerspectiveRatio, {0.0})),
    mapPadding(convertRawProp(context, rawProps, "mapPadding", sourceProps.mapPadding, {})),
    minZoom(convertRawProp(context, rawProps, "minZoom", sourceProps.minZoom, {0.0})),
    maxZoom(convertRawProp(context, rawProps, "maxZoom", sourceProps.maxZoom, {0.0})),
    isShowCompass(convertRawProp(context, rawProps, "isShowCompass", sourceProps.isShowCompass, {false})),
    isShowScaleBar(convertRawProp(context, rawProps, "isShowScaleBar", sourceProps.isShowScaleBar, {false})),
    isShowZoomControls(convertRawProp(context, rawProps, "isShowZoomControls", sourceProps.isShowZoomControls, {false})),
    isShowIndoorLevelPicker(convertRawProp(context, rawProps, "isShowIndoorLevelPicker", sourceProps.isShowIndoorLevelPicker, {false})),
    isShowLocationButton(convertRawProp(context, rawProps, "isShowLocationButton", sourceProps.isShowLocationButton, {false})),
    logoAlign(convertRawProp(context, rawProps, "logoAlign", sourceProps.logoAlign, {RNCNaverMapViewLogoAlign::BottomLeft})),
    logoMargin(convertRawProp(context, rawProps, "logoMargin", sourceProps.logoMargin, {})),
    extent(convertRawProp(context, rawProps, "extent", sourceProps.extent, {})),
    isScrollGesturesEnabled(convertRawProp(context, rawProps, "isScrollGesturesEnabled", sourceProps.isScrollGesturesEnabled, {false})),
    isZoomGesturesEnabled(convertRawProp(context, rawProps, "isZoomGesturesEnabled", sourceProps.isZoomGesturesEnabled, {false})),
    isTiltGesturesEnabled(convertRawProp(context, rawProps, "isTiltGesturesEnabled", sourceProps.isTiltGesturesEnabled, {false})),
    isRotateGesturesEnabled(convertRawProp(context, rawProps, "isRotateGesturesEnabled", sourceProps.isRotateGesturesEnabled, {false})),
    isUseTextureViewAndroid(convertRawProp(context, rawProps, "isUseTextureViewAndroid", sourceProps.isUseTextureViewAndroid, {false})),
    isStopGesturesEnabled(convertRawProp(context, rawProps, "isStopGesturesEnabled", sourceProps.isStopGesturesEnabled, {false})),
    locale(convertRawProp(context, rawProps, "locale", sourceProps.locale, {})),
    clusters(convertRawProp(context, rawProps, "clusters", sourceProps.clusters, {}))
      {}

} // namespace facebook::react
